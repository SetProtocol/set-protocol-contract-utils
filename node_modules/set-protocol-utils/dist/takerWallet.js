/*
  Copyright 2018 Set Labs Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/
'use strict';
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var _ = __importStar(require("lodash"));
var bignumber_1 = require("./bignumber");
var constants_1 = require("./constants");
var encoding_1 = require("./encoding");
var orders_1 = require("./orders");
/* ============ Taker Wallet Order Functions ============ */
/**
 * Takes taker wallet orders and generates a buffer representing all orders the
 * taker can fill directly from their wallet.
 *
 * @param  orders            Array of TakerWalletOrders
 * @return                   Entire taker wallet orders data as a buffer
 */
function generateTakerWalletOrdersBuffer(orders) {
    // Turn all taker wallet orders to buffers
    var takerOrderBody = _.map(orders, function (_a) {
        var takerTokenAddress = _a.takerTokenAddress, takerTokenAmount = _a.takerTokenAmount;
        return takerWalletOrderToBuffer(takerTokenAddress, takerTokenAmount);
    });
    var takerOrderBodyBuffer = Buffer.concat(takerOrderBody);
    // Generate header for taker wallet order
    var takerOrderHeader = orders_1.generateExchangeOrderHeader(constants_1.constants.EXCHANGES.TAKER_WALLET, orders.length, new bignumber_1.BigNumber(0), // Taker wallet orders do not take any maker token to execute
    takerOrderBodyBuffer.length);
    return Buffer.concat([
        Buffer.concat(takerOrderHeader),
        takerOrderBodyBuffer,
    ]);
}
exports.generateTakerWalletOrdersBuffer = generateTakerWalletOrdersBuffer;
/**
 * Takes a taker wallet order object and turns it into a buffer.
 *
 * @param  takerTokenAddress Address of the token the taker will fill in the taker wallet order
 * @param  takerTokenAmount  Amount of tokens the taker will fill in the order
 * @return                   Taker wallet order as a buffer
 */
function takerWalletOrderToBuffer(takerTokenAddress, takerTokenAmount) {
    var takerWalletOrder = [];
    takerWalletOrder.push(encoding_1.paddedBufferForPrimitive(takerTokenAddress));
    takerWalletOrder.push(encoding_1.paddedBufferForBigNumber(takerTokenAmount));
    return Buffer.concat(takerWalletOrder);
}
exports.takerWalletOrderToBuffer = takerWalletOrderToBuffer;
//# sourceMappingURL=takerWallet.js.map